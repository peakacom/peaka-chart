apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "peaka.fullname" . }}-be-metadata-service
  labels:
    app.kubernetes.io/name: {{ include "peaka.fullname" . }}-be-metadata-service
    {{- include "peaka.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.metadataService.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "peaka.fullname" . }}-be-metadata-service
      {{- include "peaka.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "peaka.fullname" . }}-be-metadata-service
        {{- include "peaka.labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/env-configmap.yaml") . | sha256sum }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret.name }}
        {{- range $_, $secret := .Values.additionalImagePullSecrets }}
        - name: {{ $secret }}
        {{- end }}
      initContainers:
        - name: copy-metadata
          image: {{ default (include "peaka.image.registry" .) .Values.metadataService.initContainer.image.registry }}/{{ .Values.metadataService.initContainer.image.name }}:{{ .Values.metadataService.initContainer.image.tag }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.metadataService.initContainer.image.imagePullPolicy }}
          volumeMounts:
            - name: metadata-volume
              mountPath: /metadata
              readOnly: false
          command:
            - sh
            - -c
            - |
              echo "Creating required directories in the metadata volume ..."

              # delete a directory if it exists and create it in either case
              dir="/metadata/connector"; [ -d "$dir" ] && rm -rf "$dir"; mkdir "$dir"
              dir="/metadata/development"; [ -d "$dir" ] && rm -rf "$dir"; mkdir "$dir"

              echo "Copying contents of the metadata-connector to /metadata/connector..."

              cp -R /app/. /metadata/connector

      containers:
        - name: metadata-service
          image: {{ default (include "peaka.image.registry" .) .Values.metadataService.image.registry }}/{{ .Values.metadataService.image.name }}:{{ .Values.metadataService.image.tag }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.metadataService.image.imagePullPolicy }}
          ports:
            - name: http
              containerPort: 8080
          envFrom:
            - configMapRef:
                name: {{ include "peaka.fullname" . }}-env-config
          volumeMounts:
            - name: metadata-volume
              mountPath: /metadata
              readOnly: false
          {{- with .Values.metadataService.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.metadataService.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.metadataService.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: metadata-volume
          persistentVolumeClaim:
            claimName: {{ include "peaka.fullname" . }}-data-be-metadata-service
      {{- if .Values.metadataService.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.metadataService.terminationGracePeriodSeconds }}
      {{- end }}
      {{- include "peaka.common.nodeSelector" ( dict "nodeSelector" .Values.metadataService.nodeSelector "global" $.Values.global) | nindent 6 }}
      {{- with .Values.metadataService.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- include "peaka.common.tolerations" ( dict "tolerations" .Values.metadataService.tolerations "global" $.Values.global) }}
